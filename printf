#include <stdio.h>

typedef enum {
    c, s, percent
} fmt_t;

void handle_print(char *fmt, va_list args) {
    fmt_t fmt_types[] = {
        {'c', print_char}, {'s', print_string}, {'%', print_percent}
    };

    // Handle the format string
    while (*fmt) {
        if (*fmt == '%') {
            fmt++;
            if (*fmt == 'c') {
                print_char(va_arg(args, int));
            } else if (*fmt == 's') {
                print_string(va_arg(args, char *));
            } else if (*fmt == '%') {
                print_percent();
            }
        } else {
            putchar(*fmt);
        }
        fmt++;
    }
}

void print_char(int c) {
    putchar(c);
}

void print_string(char *s) {
    while (*s) {
        putchar(*s);
        s++;
    }
}

void print_percent() {
    putchar('%');
}

int main() {
    va_list args;
    va_start(args, "Let's print a simple sentence.\n");
    _printf("Let's print a simple sentence.\n");
    va_end(args);

    va_start(args, 'S');
    _printf("%c", 'S');
    va_end(args);

    va_start(args, "A char inside a sentence: %c. Did it work?");
    _printf("A char inside a sentence: %c. Did it work?", 'F');
    va_end(args);

    va_start(args, 48);
    _printf("Let'see if the cast is correctly done: %c. Did it work?\n", 48);
    va_end(args);

    va_start(args, "This sentence is retrieved from va_args!");
    _printf("%s", "This sentence is retrieved from va_args!\n");
    va_end(args);

    va_start(args, "You %s nothing, Jon Snow.");
    _printf("Complete the sentence: You %s nothing, Jon Snow.\n", "know");
    va_end(args);

    va_start(args, (char *)0);
    _printf("Complete the sentence: You %s nothing, Jon Snow.\n", (char *)0);
    va_end(args);

    va_start(args, 'W', 'i', "some ", "more", 'r', "s", "", "know", 't', ", Jon", '\n');
    _printf("%c%cth %s%s a%cg%s: Y%sou %s no%ching%s Snow.%c", 'W', 'i', "some ", "more", 'r', "s", "", "know", 't', ", Jon", '\n');
    va_end(args);

    va_start(args, "%%");
    _printf("%%");
    va_end(args);

    va_start(args, "Should print a single percent sign: %%");
    _printf("Should print a single percent sign: %%\n");
    va_end(args);

    va_start(args, "Loading . . . 99 Please wait");
    _printf("%s%c%c%c%s%%%s%c", "Loading ", '.', '.', '.', " 99", " Please wait", '\n');
    va_end(args);

    va_start(args, "cssccscss");
    _printf("css%ccs%scscscs", 'T', "Test");
    va_end(args);

    va_start(args, str);
    _printf(str);
    va_end(args);

    va_start(args, str);
    _printf("man gcc:\n%s", str);
    va_end(args);

    va_start(args, NULL);
    _printf(NULL);
    va_end(args);

    va_start(args, '\0');
    _printf("%c", '\0');
    va_end(args);

    va_start(args, "%");
    _printf("%");
    va_end(args);

    va_start(args, "%!");
    _printf("%!\n");
    va_end(args);

    va_start(args, "%K");
    _printf("%K\n");
    va_end(args);

    return 0;
}
